name: "Checkov Application Manifests Linting"
description: "Run Checkov linting on application manifests"

inputs:
  directory:
    description: "Directory to run Checkov in"
    required: true
  scan_changed_files_only:
    description: "Only check changed files (Default: 'true' for PR context, 'false' for push context)"
    required: false
    default: ${{ github.event_name == 'pull_request' && 'true' || 'false' }}
  checkov_output_folder:
    description: "Output folder for Checkov results"
    required: false
    default: "__results__"
  check_ids:
    description: "Comma-separated list of Checkov check IDs to run. If not provided, all custom checks will be run."
    required: false
    default: ""
  include_built_in_checks:
    description: "Include built-in checks in the scan. Defaults to true."
    required: false
    default: "false"
  skip_check_ids:
    description: "Comma-separated list of Checkov check IDs to skip. If not provided, no checks will be skipped."
    required: false
    default: ""
  publish_to_step_summary:
    description: "Publish Checkov results to github step summary"
    required: false
    default: "true"
  debug:
    description: "Print debug information"
    required: false
    default: "false"

outputs:
  summary:
    description: "Checkov results summary"
    value: ${{ steps.publish-checkov-results.outputs.summary }}

runs:
  using: "composite"
  steps:
    - name: Validate Output Directory
      run: |
        echo "::group::📁 Validate Output Directory"
        {
          mkdir -p "${{ inputs.checkov_output_folder }}"
          echo "✅ Directory validated"
        }
        echo "::endgroup::"
      shell: bash

    - name: Get Changed Files
      uses: tj-actions/changed-files@v45
      id: changed-files
      if: inputs.scan_changed_files_only == 'true'
      with:
        files: |
          ${{ inputs.directory }}/**/*.yml
          ${{ inputs.directory }}/**/*.yaml
        separator: "\n"

    - name: Check for Spaces in File Names
      env:
        SCAN_CHANGED_FILES_ONLY: ${{ inputs.scan_changed_files_only }}
        INPUTS_DIRECTORY: ${{ inputs.directory }}
      run: |
        echo "::group::🔍 Check for Spaces in File Names"
        {
          if [ "$SCAN_CHANGED_FILES_ONLY" == "true" ]; then
            files_to_check='${{ steps.changed-files.outputs.all_changed_files }}'
            echo "1";
          else
            files_to_check=$(find "$INPUTS_DIRECTORY" -type f -print0 | xargs -0 -I {} echo '{}')
            echo "2";
          fi

          files_with_spaces=$(echo "$files_to_check" | grep " ")
          echo "3";

          if [ -n "$files_with_spaces" ]; then
            inline_files_with_spaces=$(echo "$files_with_spaces" | sed 's/.*/ "&"/' | paste -sd "; " -)
            echo "::error::❌ Files with spaces in names found: $inline_files_with_spaces"
            exit 1
          fi

          echo "✅ No files with spaces in names found"
        }
        echo "::endgroup::"
      shell: bash

    - name: Install yq
      uses: mikefarah/yq@master
      with:
        cmd: yq --version

    - name: Validate YAML Files
      env:
        SCAN_CHANGED_FILES_ONLY: ${{ inputs.scan_changed_files_only }}
        INPUTS_DIRECTORY: ${{ inputs.directory }}
      run: |
        echo "::group::🔍 Validate YAML Files"
        {
          if [ "$SCAN_CHANGED_FILES_ONLY" == "true" ]; then
            files_to_check='${{ steps.changed-files.outputs.all_changed_files }}'
          else
            if [ ! -d "$INPUTS_DIRECTORY" ]; then
              echo "::error::❌ Directory '$INPUTS_DIRECTORY' does not exist"
              exit 1
            fi
            files_to_check=$(find "$INPUTS_DIRECTORY" -type f \( -name '*.yml' -o -name '*.yaml' \) -print0 | xargs -0 -I {} echo '{}')
          fi

          invalid_yaml_files=$(echo "$files_to_check" | xargs -I {} sh -c 'yq eval "{}" >/dev/null 2>&1 || echo "{}"')

          if [ -n "$invalid_yaml_files" ]; then
            inline_invalid_yaml_files=$(echo "$invalid_yaml_files" | sed 's/.*/ "&"/' | paste -sd "; " -)
            echo "::error::❌ Invalid YAML files found: $inline_invalid_yaml_files"
            exit 1
          fi

          echo "✅ All YAML files are valid"
        }
        echo "::endgroup::"
      shell: bash

    - name: Checkout Custom Policies
      uses: actions/checkout@v4
      with:
        repository: delivops/checkov-linter-action
        sparse-checkout: custom_policies
        path: "__checkov-linter-action__"

    - name: Validate Custom Policies
      env:
        CUSTOM_POLICIES_DIR: "__checkov-linter-action__/custom_policies"
      run: |
        echo "::group::🔍 Validate Custom Policies"
        {
          if [ ! -d "$CUSTOM_POLICIES_DIR" ]; then
            echo "::error::❌ Custom policies directory not found"
            exit 1
          fi

          custom_policies_files_to_check=$(find "$CUSTOM_POLICIES_DIR" -type f \( -name '*.yml' -o -name '*.yaml' \) -print0 | xargs -0 -I {} echo '{}')
          invalid_custom_policies_files=$(echo "$custom_policies_files_to_check" | xargs -I {} sh -c 'yq eval "{}" >/dev/null 2>&1 || echo "{}"')

          if [ -n "$invalid_custom_policies_files" ]; then
            inline_invalid_custom_policies_files=$(echo "$invalid_custom_policies_files" | sed 's/.*/ "&"/' | paste -sd "; " -)
            echo "::error::❌ Invalid custom policy files found: $inline_invalid_custom_policies_files"
            exit 1
          fi

          echo "✅ Custom policies validated"
        }
        echo "::endgroup::"
      shell: bash

    - name: Get Custom Policy Check IDs
      id: get-custom-policy-check-ids
      env:
        CUSTOM_POLICIES_DIR: "__checkov-linter-action__/custom_policies"
      run: |
        echo "::group::🆔 Get Custom Policy Check IDs"
        {
          check_ids=$(find "$CUSTOM_POLICIES_DIR" -type f \( -name '*.yml' -o -name '*.yaml' \) -exec yq '.metadata.id' {} \; | tr '\n' ',' | sed 's/,$//')
          echo "check_ids=$check_ids" >> $GITHUB_OUTPUT

          echo "✅ Found check IDs: $check_ids"
        }
        echo "::endgroup::"
      shell: bash

    - name: Debug
      if: (success() || failure()) && inputs.debug == 'true'
      run: |
        echo "::group::🐛 Debug"
        {
          echo "[debug] Found check IDs: ${{ steps.get-custom-policy-check-ids.outputs.check_ids }}"
          echo "[debug] include_built_in_checks: ${{ inputs.include_built_in_checks }}"
          echo "[debug] check: ${{ inputs.check_ids != '' && inputs.check_ids || (inputs.include_built_in_checks == 'true' && '' || steps.get-custom-policy-check-ids.outputs.check_ids) }}"
          echo '[debug] Dir tree:'
          ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
          echo "[debug] Changed files:"
          echo -e "${{ inputs.scan_changed_files_only == 'true' && steps.changed-files.outputs.all_changed_files || 'No changed files (scan_changed_files_only!=true)' }}"
        }
        echo "::endgroup::"
      shell: bash

    - name: Run Checkov Scan
      id: run-checkov-scan
      uses: bridgecrewio/checkov-action@v12
      env:
        SKIP_PATH: "__checkov-linter-action__/custom_policies"
      with:
        directory: ${{ inputs.directory }}
        file: ${{ inputs.scan_changed_files_only == 'true' && format('"{0}"', steps.changed-files.outputs.all_changed_files) || '' }}
        check: ${{ inputs.check_ids != '' && inputs.check_ids || (inputs.include_built_in_checks == 'true' && '' || steps.get-custom-policy-check-ids.outputs.check_ids) }}
        skip_check: ${{ inputs.skip_check_ids }}
        quiet: ${{ inputs.debug != 'true' }}
        output_format: cli
        output_file_path: "${{ inputs.checkov_output_folder }}"
        external_checks_dirs: "__checkov-linter-action__/custom_policies"

    - name: Fail if Checkov Scan Failed (exit 0 fallback)
      if: success() && steps.run-checkov-scan.outcome != 'success'
      env:
        CHECKOV_OUTPUT_FILE: ${{ inputs.checkov_output_folder }}/results_cli.txt
      run: |
        echo "::group::❗ Fail if Checkov Scan Failed (exit 0 fallback)"
        {
          if [ ! -f "$CHECKOV_OUTPUT_FILE" ]; then
            echo "::error::❌ Checkov results file not found!"
            exit 1
          fi

          if grep -q 'FAILED for resource:' "$CHECKOV_OUTPUT_FILE"; then
            echo "::error::❌ Failed Checkov checks found"
            exit 1
          fi

          echo "✅ All Checkov checks passed"
        }
        echo "::endgroup::"
      shell: bash

    - name: Prepare / Publish Checkov Results
      id: publish-checkov-results
      if: failure() || success()
      env:
        PUBLISH_RESULTS: ${{ inputs.publish_to_step_summary }}
      run: |
        echo "::group::📝 Prepare / Publish Checkov Results"
        {
          if [ -f "${{ inputs.checkov_output_folder }}/results_cli.txt" ]; then
            summary=$(cat "${{ inputs.checkov_output_folder }}/results_cli.txt" | sed -E '
              s/\x1b\[[0-9;]*[mGKH]//g;
              s/^(\t)PASSED/✅\1PASSED/g;
              s/^(\t)FAILED/❌\1FAILED/g;
              s/^Check:/📋 Check:/g
            ')

            if [ "$PUBLISH_RESULTS" == "true" ]; then
              echo "$summary" >> $GITHUB_STEP_SUMMARY
              echo "✅ Checkov results published to github job summary"
            else
              echo "⏩ Checkov results not published to github job summary"
            fi
          else
            summary="❌ Error occurred while running Checkov. See action logs for details."
            echo "$summary"

            if [ "$PUBLISH_RESULTS" == "true" ]; then
              echo "$summary" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          {
            echo 'summary<<EOF'
            echo "$summary"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
        }
        echo "::endgroup::"
      shell: bash
