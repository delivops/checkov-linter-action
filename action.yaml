name: "Checkov Application Manifests Linting"
description: "Run Checkov linting on application manifests"

inputs:
  directory:
    description: "Directory to run Checkov in"
    required: true
  changed_files_only:
    description: "Only check changed files (Default: 'true' for PR context, 'false' for push context)"
    required: false
    default: ${{ github.event_name == 'pull_request' && 'true' || 'false' }}
  checkov_output_folder:
    description: "Output folder for Checkov results"
    required: false
    default: "__results__"
  check_ids:
    description: "Comma-separated list of Checkov check IDs to run. If not provided, all custom checks will be run."
    required: false
    default: ""
  include_built_in_checks:
    description: "Include built-in checks in the scan. Defaults to true."
    required: false
    default: "false"
  skip_check_ids:
    description: "Comma-separated list of Checkov check IDs to skip. If not provided, no checks will be skipped."
    required: false
    default: ""
  publish_to_step_summary:
    description: "Publish Checkov results to github step summary"
    required: false
    default: "true"
  debug:
    description: "Print debug information"
    required: false
    default: "false"

outputs:
  summary:
    description: "Checkov results summary"
    value: ${{ steps.publish-checkov-results.outputs.summary }}

runs:
  using: "composite"
  steps:
    - name: Validate Output and Check Directories
      run: |
        echo "::group::üìÅ Validate Output and Check Directories"
        {
          mkdir -p "${{ inputs.checkov_output_folder }}"
          if [ ! -d "${{ inputs.directory }}" ]; then
            echo "‚ùå Directory ${{ inputs.directory }} does not exist" ${{ inputs.publish_to_step_summary == 'true' && ' | tee -a $GITHUB_STEP_SUMMARY' || '' }}
            exit 1
          fi
          
          echo "‚úÖ Directories validated"
        }
        echo "::endgroup::"
      shell: bash

    - name: Install yq
      uses: mikefarah/yq@master
      with:
        cmd: yq --version

    - name: Validate YAML Files
      run: |
        echo "::group::üîç Validate YAML Files"
        {
          invalid_files=$(find '${{ inputs.directory }}' -type f \( -name '*.yml' -o -name '*.yaml' \) -print0 | xargs -0 -I {} sh -c 'yq eval "{}" >/dev/null 2>&1 || echo "{}"')
          if [ -n "$invalid_files" ]; then
            echo "‚ùå Invalid YAML files found:" ${{ inputs.publish_to_step_summary == 'true' && ' | tee -a $GITHUB_STEP_SUMMARY' || '' }}
            echo "$invalid_files" ${{ inputs.publish_to_step_summary == 'true' && ' | tee -a $GITHUB_STEP_SUMMARY' || '' }}
            exit 1
          fi
          
          echo "‚úÖ All YAML files are valid"
        }
        echo "::endgroup::"
      shell: bash

    - name: Checkout Custom Policies
      uses: actions/checkout@v4
      with:
        repository: delivops/checkov-linter-action
        sparse-checkout: custom_policies
        path: __checkov-linter-action__

    - name: Validate Custom Policies
      run: |
        echo "::group::üîç Validate Custom Policies"
        {
          if [ ! -d "__checkov-linter-action__/custom_policies" ]; then
            echo "‚ùå Custom policies directory not found" ${{ inputs.publish_to_step_summary == 'true' && ' | tee -a $GITHUB_STEP_SUMMARY' || '' }}
            exit 1
          fi
          
          invalid_files=$(find '__checkov-linter-action__/custom_policies' -type f \( -name '*.yml' -o -name '*.yaml' \) -print0 | xargs -0 -I {} sh -c 'yq eval "{}" >/dev/null 2>&1 || echo "{}"')
          if [ -n "$invalid_files" ]; then
            echo "‚ùå Invalid custom policy files found:" ${{ inputs.publish_to_step_summary == 'true' && ' | tee -a $GITHUB_STEP_SUMMARY' || '' }}
            echo "$invalid_files" ${{ inputs.publish_to_step_summary == 'true' && ' | tee -a $GITHUB_STEP_SUMMARY' || '' }}
            exit 1
          fi
          
          echo "‚úÖ Custom policies validated"
        }
        echo "::endgroup::"
      shell: bash

    - name: Get Custom Policy Check IDs
      id: get-custom-policy-check-ids
      run: |
        echo "::group::üÜî Get Custom Policy Check IDs"
        {
          check_ids=$(find '__checkov-linter-action__/custom_policies' -type f \( -name '*.yml' -o -name '*.yaml' \) -exec yq '.metadata.id' {} \; | tr '\n' ',' | sed 's/,$//')
          echo "check_ids=$check_ids" >> $GITHUB_OUTPUT
          echo "Found check IDs: $check_ids"
        }
        echo "::endgroup::"
      shell: bash

    - name: Get Changed Files
      uses: tj-actions/changed-files@v45
      id: changed-files
      if: inputs.changed_files_only == 'true'
      with:
        files: |
          ${{ inputs.directory }}/**/*.yml
          ${{ inputs.directory }}/**/*.yaml
        separator: '\n'

    - name: Create Checkov Config File
      env:
        CONFIG_FILE: __checkov-linter-action__/config.yaml
        CHANGED_FILES_ONLY: ${{ inputs.changed_files_only }}
        DIRECTORY: ${{ inputs.directory }}
        FILES: ${{ steps.changed-files.outputs.all_changed_files}}
        CHECK_IDS: ${{ inputs.check_ids != '' && inputs.check_ids || (inputs.include_built_in_checks == 'true' && '' || steps.get-custom-policy-check-ids.outputs.check_ids) }}
        SKIP_CHECK_IDS: ${{ inputs.skip_check_ids }}
        QUIET: ${{ inputs.debug != 'true' }}
        SKIP_PATH: __checkov-linter-action__
        OUTPUT_FILE_PATH: ${{ inputs.checkov_output_folder }}
        EXTERNAL_CHECKS_DIRS: __checkov-linter-action__/custom_policies
      run: |
        echo "::group::‚öôÔ∏è Create Checkov Config File"
        {
          touch $CONFIG_FILE
          
          if [ "$CHANGED_FILES_ONLY" == "true" ]; then
            yq -i 'del(.directory)' $CONFIG_FILE
            file="$FILES"
            yq -i ".file = \"$file\" | .file |= split(\"\\n\")" $CONFIG_FILE
          else
            yq -i 'del(.file)' $CONFIG_FILE
            directory="$DIRECTORY"
            yq -i ".directory = \"$directory\"" $CONFIG_FILE
          fi
          
          check="$CHECK_IDS"
          yq -i ".check = \"$check\" | .check |= split(\",\")" $CONFIG_FILE
          
          skip_check="$SKIP_CHECK_IDS"
          yq -i ".skip-check = \"$skip_check\" | .skip-check |= split(\",\")" $CONFIG_FILE
          
          yq -i ".compact = true" $CONFIG_FILE
          yq -i ".quiet = $QUIET" $CONFIG_FILE
          
          yq -i ".skip-path = \"$SKIP_PATH\"" $CONFIG_FILE
          yq -i ".output = \"cli\"" $CONFIG_FILE
          yq -i ".output-file-path = \"$OUTPUT_FILE_PATH\"" $CONFIG_FILE
          yq -i ".external-checks-dirs = [\"$EXTERNAL_CHECKS_DIRS\"]" $CONFIG_FILE
          
          echo "‚úÖ Checkov config file created"
          cat $CONFIG_FILE
        }
        echo "::endgroup::"
      shell: bash

    - name: Debug
      if: (success() || failure()) && inputs.debug == 'true'
      run: |
        echo "::group::üêõ Debug"
        {
          echo "[debug] Found check IDs: ${{ steps.get-custom-policy-check-ids.outputs.check_ids }}"
          echo '[debug] Dir tree:'
          ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
          echo "[debug] Changed files:"
          echo "${{ inputs.changed_files_only == 'true' && steps.changed-files.outputs.all_changed_files || 'inputs.changed_files_only!=true' }}"
        }
        echo "::endgroup::"
      shell: bash

    - name: Run Checkov Scan
      id: run-checkov-scan
      uses: bridgecrewio/checkov-action@v12
      with:
        config_file: __checkov-linter-action__/config.yaml

    - name: Fail if Checkov Scan Failed (exit 0 fallback)
      if: success() && steps.run-checkov-scan.outcome != 'success'
      run: |
        echo "::group::‚ùó Fail if Checkov Scan Failed (exit 0 fallback)"
        {
          if [ ! -f "${{ inputs.checkov_output_folder }}/results_cli.txt" ]; then
            echo "::error::‚ùå Checkov results file not found!"
            exit 1
          elif grep -q 'FAILED for resource:' "${{ inputs.checkov_output_folder }}/results_cli.txt"; then
            echo "::error::‚ùå Failed Checkov checks found"
            exit 1
          fi

          echo "‚úÖ All Checkov checks passed"
        }
        echo "::endgroup::"
      shell: bash

    - name: Prepare / Publish Checkov Results
      id: publish-checkov-results
      if: failure() || success()
      env:
        PUBLISH_RESULTS: ${{ inputs.publish_to_step_summary }}
      run: |
        echo "::group::üìù Prepare / Publish Checkov Results"
        {
          if [ -f "${{ inputs.checkov_output_folder }}/results_cli.txt" ]; then
            summary=$(cat "${{ inputs.checkov_output_folder }}/results_cli.txt" | sed -E '
              s/\x1b\[[0-9;]*[mGKH]//g;
              s/^(\t)PASSED/‚úÖ\1PASSED/g;
              s/^(\t)FAILED/‚ùå\1FAILED/g;
              s/^Check:/üìã Check:/g
            ')
            
            if [ "$PUBLISH_RESULTS" == "true" ]; then
              echo "$summary" >> $GITHUB_STEP_SUMMARY
              echo "‚úÖ Checkov results published to github job summary"
            else
              echo "‚è© Checkov results not published to github job summary"
            fi
          else
            summary="‚ùå Checkov results not found"
            echo "::error::$summary"
          fi

          {
            echo 'summary<<EOF'
            echo "$summary"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
        }
        echo "::endgroup::"
      shell: bash
